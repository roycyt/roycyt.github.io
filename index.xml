<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>https://roycyt.github.io/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 Aug 2020 23:04:03 +0800</lastBuildDate>
    
	<atom:link href="https://roycyt.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Go] Pattern Matching</title>
      <link>https://roycyt.github.io/posts/go-pattern-matching/</link>
      <pubDate>Thu, 27 Aug 2020 23:04:03 +0800</pubDate>
      
      <guid>https://roycyt.github.io/posts/go-pattern-matching/</guid>
      <description>regexp pattern := &amp;quot;lo_wor&amp;quot; source := &amp;quot;hello world&amp;quot; matched, err := regexp.MatchString(pattern, source) // matched: true parse, err := regexp.Compile(&amp;quot;[Hh]ello&amp;quot;) matched := parse.MatchString(&amp;quot;Hello world&amp;quot;) // true matched = parse.MatchString(&amp;quot;hello world&amp;quot;) // true </description>
    </item>
    
    <item>
      <title>[Go] Random Numbers</title>
      <link>https://roycyt.github.io/posts/go-random-numbers/</link>
      <pubDate>Thu, 27 Aug 2020 19:04:37 +0800</pubDate>
      
      <guid>https://roycyt.github.io/posts/go-random-numbers/</guid>
      <description>math/rand import &amp;quot;math/rand&amp;quot; import &amp;quot;time&amp;quot; Seeding:
rand.Seed(time.Now().Unix()) Get a random number in [0,n).
var n := 100 rand.Intn(n) // 0 ~ 99 crypto/rand </description>
    </item>
    
    <item>
      <title>Conky</title>
      <link>https://roycyt.github.io/posts/conky/</link>
      <pubDate>Thu, 27 Aug 2020 14:39:32 +0800</pubDate>
      
      <guid>https://roycyt.github.io/posts/conky/</guid>
      <description>AppImage is available: https://github.com/brndnmtthws/conky/releases
Create the config file:
$ conky-x86_64.AppImage -C &amp;gt; ~/.conkyrc Customize:
- alignment = &#39;top_left&#39;, + alignment = &#39;top_right&#39;, - font = &#39;DejaVu Sans Mono:size=12&#39;, + font = &#39;Hack:size=11&#39;, + own_window_argb_visual = true, + own_window_argb_value = 50, -Up:$color ${upspeed} ${color grey} - Down:$color ${downspeed} +Up:$color ${upspeed wlp3s0} ${color grey} - Down:$color ${downspeed wlp3s0} Start conky:
$ conky-x86_64.AppImage Add conky to the startup applications:
$ gnome-session-properties </description>
    </item>
    
    <item>
      <title>[Go] Standard Input</title>
      <link>https://roycyt.github.io/posts/go-standard-input/</link>
      <pubDate>Thu, 27 Aug 2020 07:30:08 +0800</pubDate>
      
      <guid>https://roycyt.github.io/posts/go-standard-input/</guid>
      <description>Store successive space-separated values into successive arguments:
import &amp;quot;fmt&amp;quot; var arg1, arg2 string n, _ := fmt.Scanln(&amp;amp;arg1, &amp;amp;arg2) fmt.Printf(&amp;quot;n: %d, arg1: %s, arg2: %s\n&amp;quot;, n, arg1, arg2) $ go run . Input: -a -b n: 2, arg1: -a, arg2: -b </description>
    </item>
    
    <item>
      <title>[Go] Resources</title>
      <link>https://roycyt.github.io/posts/go-resources/</link>
      <pubDate>Thu, 27 Aug 2020 00:25:08 +0800</pubDate>
      
      <guid>https://roycyt.github.io/posts/go-resources/</guid>
      <description> Why Go Go Code Review Comments Ultimate Go study guide  </description>
    </item>
    
    <item>
      <title>[Go] Command Line Arguments</title>
      <link>https://roycyt.github.io/posts/go-command-line-arguments/</link>
      <pubDate>Mon, 24 Aug 2020 23:04:25 +0800</pubDate>
      
      <guid>https://roycyt.github.io/posts/go-command-line-arguments/</guid>
      <description>import &amp;quot;os&amp;quot; os.Args (type: []string) hold the command-line arguments, starting with the program name.
Program name: os.Args[0]
List of arguments: os.Args[1:]
Number of arguments: len(os.Args[1:]
Convert the argument from string to integer:
import &amp;quot;strconv&amp;quot; num, err := strconv.Atoi(os.Args[1]) </description>
    </item>
    
  </channel>
</rss>